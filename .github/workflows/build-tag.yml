name: Build Tag

on:
  release:
    types:
      - published

defaults:
  run:
    shell: bash -eu {0}

env:
  GO_VERSION: "1.18"

jobs:

  discover-functions:
    outputs:
      functions: ${{ steps.discover.outputs.functions }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: discover
        run: echo "::set-output name=functions::$(ls -d * | jq -R -s -c 'split("\n")[:-1]')"
        working-directory: cmd/functions

  tag-functions:
    name: "Tag function: ${{ matrix.function }}"
    needs: discover-functions
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        function: ${{fromJson(needs.discover-functions.outputs.functions)}}
    steps:
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/arikkfir/kude/functions/${{ matrix.function }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=tag
      - run: |-
          docker pull ${IMAGE}
          TAGS="${{ steps.docker-meta.outputs.tags }}"
          for tag in ${TAGS}; do
            docker tag ${IMAGE} ${tag}
            docker push ${tag}
          done
        env:
          IMAGE: ghcr.io/arikkfir/kude/functions/${{ matrix.function }}:${{ github.sha }}

  build-linux-cli:
    name: Tag Linux CLI
    needs: tag-functions
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: golang-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-${{ github.sha }}
          restore-keys: |
            golang-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            golang-${{ runner.os }}-
      - run: go mod download
      - run: go vet ./...
      - run: go test -ldflags "-X 'github.com/arikkfir/kude/pkg.gitTag=${{ github.ref_name }}' -X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" ./...
      - run: go build -o kude-linux-amd64 -ldflags "-X 'github.com/arikkfir/kude/pkg.gitTag=${{ github.ref_name }}' -X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" cmd/cli/main.go
        env:
          GOARCH: amd64
          GOOS: linux
      - run: gh release upload --clobber ${{ github.ref_name }} ./kude-linux-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-darwin-cli:
    name: Tag Darwin CLI
    needs: tag-functions
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: golang-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-${{ github.sha }}
          restore-keys: |
            golang-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            golang-${{ runner.os }}-
      - run: go mod download
      - run: go vet ./...
      - run: go test -ldflags "-X 'github.com/arikkfir/kude/pkg.gitTag=${{ github.ref_name }}' -X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" ./...
      - run: go build -o kude-darwin-amd64 -ldflags "-X 'github.com/arikkfir/kude/pkg.gitTag=${{ github.ref_name }}' -X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" cmd/cli/main.go
        env:
          GOARCH: amd64
          GOOS: darwin
      - env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo -n "${MACOS_CERTIFICATE}" | base64 --decode > certificate.p12
          echo -n "${MACOS_CERTIFICATE_PWD}" > certificate.pwd
          set -x
          security create-keychain -p macos123 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p macos123 build.keychain
          security import certificate.p12 -k build.keychain -P "$(cat certificate.pwd)" -T /usr/bin/codesign
          security find-identity -v build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k macos123 build.keychain
          /usr/bin/codesign \
                  --force \
                  --keychain build.keychain \
                  --sign "Developer ID Application: Arye Kfir (9ARDRAN4L7)" \
                  --identifier "com.kfirs.kude" \
                  --verbose \
                  kude-darwin-amd64
      - run: gh release upload --clobber ${{ github.ref_name }} ./kude-darwin-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
