name: Build
on:
  push:
    branches: [ '*' ]
    paths-ignore:
      - .github/workflows/on-push-tag.yml
      - .github/release*.yml
      - '**/*.md'
      - LICENSE
  workflow_dispatch:
defaults:
  run:
    shell: bash -eu {0}
jobs:
  discover-functions:
    outputs:
      functions: ${{ steps.discover.outputs.functions }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: discover
        run: echo "::set-output name=functions::$(ls -d * | jq -R -s -c 'split("\n")[:-1]')"
        working-directory: cmd/functions
  build-functions:
    name: Build function ${{ matrix.function }}
    needs: [ discover-functions ]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-multi-buildx-
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/arikkfir/kude/functions/${{ matrix.function }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=,format=short
            type=sha,prefix=,format=long
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
      - uses: docker/build-push-action@v2
        with:
          build-args: function=${{ matrix.function }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          #context: functions/${{ matrix.function }}
          file: cmd/functions/${{ matrix.function }}/Dockerfile
          labels: ${{ steps.docker-meta.outputs.labels }}
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
      - run: rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    strategy:
      matrix:
        function: ${{fromJson(needs.discover-functions.outputs.functions)}}
  build-cli:
    name: Build CLI ${{ matrix.os }}
    needs: [ build-functions ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - uses: actions/cache@v2
        if: ${{ runner.os == 'macOS' }}
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - run: go mod download
      - run: go vet ./cmd/cli/... ./internal/... /pkg/... ./test/...
      - run: |-
          for f in $(ls -d *); do
            docker pull ghcr.io/arikkfir/kude/functions/${f}:${{ github.sha }}
            docker tag ghcr.io/arikkfir/kude/functions/${f}:${{ github.sha }} ghcr.io/arikkfir/kude/functions/${f}:test
          done
        working-directory: cmd/functions
      - run: go test ./internal/... ./pkg/... -coverprofile=coverage.out # TODO: publish coverage in PR
      - run: go build -o kude-${{ matrix.os }} cmd/cli/main.go
        env:
          GOARCH: amd64
          GOOS: ${{ matrix.os }}
      - uses: google-github-actions/auth@v0
        with:
          service_account: kude-github-actions@arikkfir.iam.gserviceaccount.com
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v0
      - run: gsutil cp kude-${{ matrix.os }} gs://arikkfir-artifacts/kude/kude-${{ matrix.os }}-${{ github.sha }}
    strategy:
      matrix:
        os: [ darwin, linux ]
