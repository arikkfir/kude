name: Build
on:
  push:
    branches: [ '*' ]
  workflow_dispatch:
defaults:
  run:
    shell: bash -eu {0}
jobs:
  discover-functions:
    outputs:
      functions: ${{ steps.discover.outputs.functions }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: discover
        run: echo "::set-output name=functions::$(ls -d * | jq -R -s -c 'split("\n")[:-1]')"
        working-directory: cmd/functions
  build-functions:
    name: Build function ${{ matrix.function }}
    needs: [ discover-functions ]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-multi-buildx-
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/arikkfir/kude/functions/${{ matrix.function }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=,format=short
            type=sha,prefix=,format=long
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
      - uses: docker/build-push-action@v2
        with:
          build-args: function=${{ matrix.function }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          file: cmd/functions/${{ matrix.function }}/Dockerfile
          labels: ${{ steps.docker-meta.outputs.labels }}
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
      - run: rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    strategy:
      matrix:
        function: ${{fromJson(needs.discover-functions.outputs.functions)}}
  build-cli-linux:
    name: Build Linux CLI
    needs: [ build-functions ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - run: go mod download
      - run: go version
      - run: go vet ./...
      - run: go test -ldflags "-X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" ./...
      - run: go build -o kude-linux-amd64 -ldflags "-X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" cmd/cli/main.go
        env:
          GOARCH: amd64
          GOOS: linux
      - uses: google-github-actions/auth@v0
        with:
          service_account: gha-arikkfir-kude@arikkfir.iam.gserviceaccount.com
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v0
      - run: gsutil cp kude-linux-amd64 gs://arikkfir-artifacts/kude/kude-linux-amd64-${{ github.sha }}
  build-cli-darwin:
    name: Build Darwin CLI
    needs: [ build-functions, build-cli-linux ]
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - run: go mod download
      - run: go vet ./...
      - run: go build -o kude-darwin-amd64 -ldflags "-X 'github.com/arikkfir/kude/pkg.gitCommit=${{ github.sha }}'" cmd/cli/main.go
        env:
          GOARCH: amd64
          GOOS: darwin
      - env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo -n "${MACOS_CERTIFICATE}" | base64 --decode > certificate.p12
          echo -n "${MACOS_CERTIFICATE_PWD}" > certificate.pwd
          set -x
          security create-keychain -p macos123 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p macos123 build.keychain
          security import certificate.p12 -k build.keychain -P "$(cat certificate.pwd)" -T /usr/bin/codesign
          security find-identity -v build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k macos123 build.keychain
          /usr/bin/codesign \
                  --force \
                  --keychain build.keychain \
                  --sign "Developer ID Application: Arye Kfir (9ARDRAN4L7)" \
                  --identifier "com.kfirs.kude" \
                  --verbose \
                  kude-darwin-amd64
      - uses: google-github-actions/auth@v0
        with:
          service_account: gha-arikkfir-kude@arikkfir.iam.gserviceaccount.com
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v0
      - run: gsutil cp kude-darwin-amd64 gs://arikkfir-artifacts/kude/kude-darwin-amd64-${{ github.sha }}
